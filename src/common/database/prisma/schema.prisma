generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model alt_ordering_hours {
  valid_from  DateTime     @db.Date
  valid_to    DateTime     @db.Date
  day_of_week DAY_OF_WEEK?
  open_time   DateTime?    @db.Timetz(6)
  close_time  DateTime?    @db.Timetz(6)
  is_closed   Boolean

  @@unique([valid_from, valid_to, day_of_week], name: "alt_ordering_hours_uq")
  @@ignore
}

model category {
  category_id     Int               @id @default(autoincrement())
  name            String?
  description     String?
  active          Boolean           @default(true)
  private_note    String?
  category_X_item category_X_item[]
  menu_X_category menu_X_category[]
}

model category_X_item {
  category_id   Int
  item_id       Int
  display_order Int      @db.SmallInt
  category      category @relation(fields: [category_id], references: [category_id])
  item          item     @relation(fields: [item_id], references: [item_id])

  @@id([category_id, item_id])
}

model item {
  item_id         Int               @id @default(autoincrement())
  name            String
  description     String?
  active          Boolean           @default(true)
  is_standalone   Boolean           @default(false)
  price           Decimal?          @db.Money
  private_note    String?
  category_X_item category_X_item[]
  item_X_modgroup item_X_modgroup[]
  modgroup_item   modgroup_item[]

  @@unique([item_id, is_standalone], name: "item_id_standalone_uq")
}

model item_X_modgroup {
  item_id            Int
  mod_id             Int
  item_is_standalone Boolean  @default(false)
  display_order      Int      @db.SmallInt
  item               item     @relation(fields: [item_id, item_is_standalone], references: [item_id, is_standalone])
  modgroup           modgroup @relation(fields: [mod_id], references: [mod_id])

  @@id([item_id, mod_id])
}

model menu {
  menu_id         Int               @id @default(autoincrement())
  name            String?
  display_order   Int               @db.SmallInt
  active          Boolean           @default(true)
  description     String?
  private_note    String?
  menu_X_category menu_X_category[]
}

model menu_X_category {
  category_id_category Int
  menu_id_menu         Int
  display_order        Int      @db.SmallInt
  category             category @relation(fields: [category_id_category], references: [category_id])
  menu                 menu     @relation(fields: [menu_id_menu], references: [menu_id])

  @@id([category_id_category, menu_id_menu])
}

model modgroup {
  mod_id             Int               @id @default(autoincrement())
  name               String
  required_selection Int               @db.SmallInt
  max_selection      Int               @db.SmallInt
  max_single_select  Int               @db.SmallInt
  free_selection     Int               @db.SmallInt
  price              Decimal           @default(0) @db.Money
  description        String?
  private_note       String?
  item_X_modgroup    item_X_modgroup[]
  modgroup_item      modgroup_item[]
}

model modgroup_item {
  modgroup_item_id   Int      @id @default(autoincrement())
  mod_id             Int
  item_id            Int
  item_is_standalone Boolean  @default(false)
  price              Decimal? @db.Money
  display_order      Int      @db.SmallInt
  item               item     @relation(fields: [item_id, item_is_standalone], references: [item_id, is_standalone])
  modgroup           modgroup @relation(fields: [mod_id], references: [mod_id])

  @@unique([mod_id, item_id], name: "modgroup_item_uq_mod_id_item_id")
}

model order {
  oid                   Int          @id @default(autoincrement())
  email                 String       @db.Citext
  name                  String
  phone                 String?
  transaction_token     String?
  time_placed           DateTime     @default(now()) @db.Timestamptz(6)
  time_accepted         DateTime?    @db.Timestamptz(6)
  pickup_time           DateTime     @db.Timestamptz(6)
  amount_paid           Decimal      @db.Money
  tax                   Decimal      @db.Money
  status                order_status @default(NEW)
  details               Json         @db.Json
  stripe_payment_intent String?
}

model ordering_hours {
  day_of_week DAY_OF_WEEK
  open_time   DateTime    @db.Timetz(6)
  close_time  DateTime    @db.Timetz(6)

  @@unique([day_of_week, open_time, close_time], name: "ordering_hours_entry_uq")
}

model store {
  username      String @id
  password_hash String @db.VarChar(60)
}

model stripe {
  payment_intent String   @id
  time_started   DateTime @default(now()) @db.Timetz(6)
}

enum DAY_OF_WEEK {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum order_status {
  NEW
  ACCEPTED
  FULFILLED
  CANCELLED
}
